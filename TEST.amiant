## Struct-Objects

var PERSON = `struct
	firstName: firstName,
	lastName: lastName,
	age: age
;

func newPerson expect firstName: String, lastName: String, age: Number {
	return ~PERSON
};

var person1 = ~newPerson firstName: "L", lastName: "Ub", age: $12;

println "Name: " #person1 .firstName;
println "Age: " #person1 .lastName;

## Async Await:

var jsonData: String = "{}";

async jsonData {
   ## Fetch Data
   yield "{}";
};

println "JSON-Data: " await jsonData;

## Rest-API

func rest'connect expect headers: Struct, method: Enum, body: String whith (is method signature .POST .GET) {
	#headers. 
};

~rest'connect headers: headers, method: .GET, body: "";

template Person
name:"",
age:$-1,
ageTo18:-> {
   - $18 #self.age
},

; ## ist ein im Scope erzeugtes Template f√ºr ein Struct

var myPerson = new Person name:"Bob", age: $4;

typeof (myPerson); ## ergibt Person

struct key:value;

template Person:
name,
age;

#myPerson .name;


struct <?:Signature> ## -> Erzeugt ein Struct nach einer Signatur

enum Weather CLEAR THUNDER;


#Weather.CLEAR; ## enum mit Selection Eigenschaft (Selection ist kompletter Pfad Weather.CLEAR; Alle Enums, mit gleichem Pfad sind gleigh





if = myWeather #Weather.CLEAR;